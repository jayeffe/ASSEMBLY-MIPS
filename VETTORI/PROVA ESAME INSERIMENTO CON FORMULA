# Traccia:
# Scrivere un programma che inizializzi un array monodimensionale, 

# Dovete scrivere un programma assembly che inizializza un array monodimensionale, e successivamente accede all’elemento corrispondente all’indice fornito in input.
# Si allochi staticamente in area dati globale un array di 20 interi. Il main richiama una funzione array_init,
# fornendole come unico parametro il puntatore all’array. La funzione inizializza ogni elemento A[i] dell’array al valore i*6+1. Al ritorno dalla funzione, 
# il main legge da tastiera l’intero i, e richiama la funzione
# array_element, che ha due parametri (indirizzo base dell’array ed il valore di i) e ritorna l’intero A[i].

# L’accesso viene ripetuto in ciclo finchè l’utente non immette un indice -1.


.data
.align 2 
array: .space 80
inserisci: .asciiz "inserisci elemento nell'array "
spazio: .asciiz " "
accapo: .asciiz "\n"
inserisci_indice: .asciiz "indice--->  "


.text


.globl main
main:

la $a0,inserisci
li $v0,4
syscall
 
la $a0,array
jal array_init

la $a0,array
jal stampa


indice:

la $a0,inserisci_indice
li $v0,4
syscall

li $v0,5
syscall 

beq $v0,-1,continua

move $a1,$v0 
la $a0,array
jal array_element 

la $a0,accapo
li,$v0,4
syscall 


j indice
continua:


li $v0,10
syscall


array_init:
move $t9,$a0
li $t0,0
ciclo_inserimento:
beq $t0,20,esci_inserimento
mul $t1,$t0,4
add $t1,$t1,$t9

#i*6 +1
mul $t4,$t0,6 
add $t2,$t4,1

sw $t2,($t1)

addi $t0,$t0,1
j ciclo_inserimento
esci_inserimento:

jr $ra



stampa:
move $t9,$a0
li $t0,0
ciclo_stampa:
beq $t0,20,esci_stampa

mul $t1,$t0,4
add $t1,$t1,$t9

lw $t2,($t1)

move $a0,$t2
li $v0,1
syscall

la $a0,spazio
li $v0,4
syscall 



addi $t0,$t0,1
j ciclo_stampa
esci_stampa:

jr $ra 

array_element:
move $t9,$a0
move $t8,$a1 

mul $t1,$t8,4
add $t1,$t1,$t9
lw $t2,($t1)

move $a0,$t2
li $v0,1
syscall 

jr $ra 
