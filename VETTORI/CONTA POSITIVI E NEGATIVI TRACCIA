# Traccia del 20/11/2014:

# Dovete scrivere un programma assembly il cui main allochi un arr di 5 interi sullo stack(cioË, arr Ë una variabile locale del main

# non una variabile globale). Una funzione riempi_array riceve il puntatore all'array come parametro e riempie ogni singola componente arr[i]

# con un valore ricevuto in input dall'utente. La funzione non ritorna alcun valore al main. Una seconda funzione conta_pos_neg riceve

# come parametro l'indirizzo dell'array, esegue un loop(obbligatorio usare un loop!) per contare il numero di valori positivi e genativi,

# e li ritorna in $v0 e $v1. Il main stampa infine i due valori ricevuti da conta_pos_neg.


.data
inserisci: .asciiz "inserisci elementi "
spazio: .asciiz " " 
accapo: .asciiz "\n" 
positivi: .asciiz "interi positivi "
negativi: .asciiz "interi negativi "
.text



.globl main
main:

la $a0,inserisci
li $v0,4
syscall

addi $sp,$sp,-20
move $s0,$sp

move $a0,$s0
jal inserisci_elementi

move $a0,$s0
jal stampa

move $a0,$s0
jal conta_positivi_negativi
move $t0,$v0
move $t1,$v1

la $a0,accapo
li $v0,4
syscall 


la $a0,positivi
li $v0,4
syscall

move $a0,$t0
li $v0,1
syscall

la $a0,accapo
li $v0,4
syscall 


la $a0,negativi
li $v0,4
syscall

move $a0,$v1
li $v0,1
syscall 





esci:
addi $sp,$sp,20
li $v0,10
syscall

inserisci_elementi:
move $t9,$a0
li $t0,0
ciclo_inserimento:
beq $t0,5,esci_inserimento
mul $t1,$t0,4
add $t1,$t1,$t9

li $v0,5
syscall

sw $v0,($t1)


addi $t0,$t0,1
j ciclo_inserimento
esci_inserimento:

jr $ra 


stampa:
move $t9,$a0
li $t0,0
ciclo_stampa:
beq $t0,5,esci_stampa
mul $t1,$t0,4
add $t1,$t1,$t9

lw $t2,($t1)
move $a0,$t2
li $v0,1
syscall

la $a0,spazio
li $v0,4
syscall 

addi $t0,$t0,1
j ciclo_stampa
esci_stampa:
jr $ra 


conta_positivi_negativi:
li $v0,0
li $v1,0 
move $t9,$a0
li $t0,0 
ciclo_cpn:
beq $t0,5,esci_cpn
mul $t1,$t0,4
add $t1,$t1,$t9

lw $t2,($t1)

bgtz $t2,maggiore

addi $v1,$v1,1
addi $t0,$t0,1
j ciclo_cpn
maggiore:
addi $v0,$v0,1



addi $t0,$t0,1
j ciclo_cpn
esci_cpn:

jr $ra 